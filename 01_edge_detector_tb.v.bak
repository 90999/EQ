`timescale 1 ns / 1 ps

module counter_tb;

	reg i_spdif;
	reg i_rst_n;
	reg i_clk;
	reg i_ena;
	wire o_zero;
	wire o_one;
	wire o_head;
	wire o_shift_ena;

	parameter period = 10; // ????
	reg [191:0] data;
	reg [7:0] pointer;
	
	event reset_on;
	event reset_off;
	event bit_flip;
	event long_pulse;
	
edge_detector inst0 (
	.i_spdif		(i_spdif),
	.i_rst_n		(i_rst_n),
	.i_clk		(i_clk),
	.i_ena		(i_ena),
	.o_zero		(o_zero),
	.o_one		(o_one),
	.o_head		(o_head),
	.o_shift_ena(o_shift_ena)
);

	initial begin
		i_spdif = 0;
		i_rst_n = 1;
		i_clk = 0;
		i_ena = 0;
		data = {1'b0, {2{1'b1}}, {3{1'b0}}, {4{1'b1}}, {5{1'b0}}, {6{1'b1}}, {7{1'b0}}, {8{1'b1}}, {9{1'b0}}, {10{1'b1}}, {11{1'b0}}, {12{1'b1}}, {13{1'b0}}, {14{1'b1}}};
		//192'b01100011110000011111100000010011110010010011011101111100011000100001011111000110100011100010001000001001001010111110100111001010011100100110101101111000100010100010110000100101000100001101101001101111001001000011000100;
	end

	always
		#(period/2) i_clk = ~i_clk;
    
	/* Reset logic */
	always @(reset_on) begin
		@(negedge clk);
		i_rst_n = 0;
		@(negedge clk);
		i_rst_n = 1;
		-> reset_off;
	end
	
	always @(bit_flip) begin
	end
	
	always @(long_pulse) begin
	end
	
	/* Main Routine */
	initial begin
		#10 -> reset_on;
		@(reset_off);
		for (pointer = 0; pointer < 104; pointer = pointer + 1) begin
			i_spdif = data[pointer];
			if (pointer == 40)
				-> bit_flip;
			else if (pointer == 80)
				-> long_pulse;
		end
		#100 $finish;
   end
	
	/* Results */
	initial begin
		$dumpfile ("edge_detector.vcd");
		$dumpvars;
	end 
    
	initial begin
		$display("\t\ttime,\tclk,\treset,\tenable,\ti_spdif,\to_0,\to_1,\to_h,\to_shift");
		$monitor("%d,\t%b,\t%b,\t%b,\t%b,\t%b,\t%b,\t%b,\t%b,", $time, i_clk, i_rst_n, i_ena, i_spdif, o_zero, o_one, o_head, o_shift_ena);
	end
	
endmodule
