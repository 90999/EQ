// Copyright (C) 1991-2012 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 32-bit"
// VERSION "Version 12.0 Build 178 05/31/2012 SJ Web Edition"

// DATE "01/10/2013 11:47:25"

// 
// Device: Altera EP4CE115F29C8 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 100 ps/ 1 ps

module main (
	decoded_clock,
	decoded_flow,
	spdif_cmos,
	rst_n,
	clock0);
output 	decoded_clock;
output 	decoded_flow;
input 	spdif_cmos;
input 	rst_n;
input 	clock0;

// Design Ports Information
// decoded_clock	=>  Location: PIN_P21,	 I/O Standard: 2.5 V,	 Current Strength: Default
// decoded_flow	=>  Location: PIN_U3,	 I/O Standard: 2.5 V,	 Current Strength: Default
// spdif_cmos	=>  Location: PIN_A6,	 I/O Standard: 2.5 V,	 Current Strength: Default
// rst_n	=>  Location: PIN_AG18,	 I/O Standard: 2.5 V,	 Current Strength: Default
// clock0	=>  Location: PIN_AD26,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("equalizer_min_1200mv_0c_v_fast.sdo");
// synopsys translate_on

wire \spdif_cmos~input_o ;
wire \rst_n~input_o ;
wire \clock0~input_o ;
wire \decoded_clock~output_o ;
wire \decoded_flow~output_o ;


// Location: IOOBUF_X115_Y36_N2
cycloneive_io_obuf \decoded_clock~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\decoded_clock~output_o ),
	.obar());
// synopsys translate_off
defparam \decoded_clock~output .bus_hold = "false";
defparam \decoded_clock~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y34_N9
cycloneive_io_obuf \decoded_flow~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\decoded_flow~output_o ),
	.obar());
// synopsys translate_off
defparam \decoded_flow~output .bus_hold = "false";
defparam \decoded_flow~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X27_Y73_N15
cycloneive_io_ibuf \spdif_cmos~input (
	.i(spdif_cmos),
	.ibar(gnd),
	.o(\spdif_cmos~input_o ));
// synopsys translate_off
defparam \spdif_cmos~input .bus_hold = "false";
defparam \spdif_cmos~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X69_Y0_N8
cycloneive_io_ibuf \rst_n~input (
	.i(rst_n),
	.ibar(gnd),
	.o(\rst_n~input_o ));
// synopsys translate_off
defparam \rst_n~input .bus_hold = "false";
defparam \rst_n~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X115_Y10_N1
cycloneive_io_ibuf \clock0~input (
	.i(clock0),
	.ibar(gnd),
	.o(\clock0~input_o ));
// synopsys translate_off
defparam \clock0~input .bus_hold = "false";
defparam \clock0~input .simulate_z_as = "z";
// synopsys translate_on

assign decoded_clock = \decoded_clock~output_o ;

assign decoded_flow = \decoded_flow~output_o ;

endmodule
